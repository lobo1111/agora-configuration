<?xml version="1.0" encoding="UTF-8"?>
<templates>
    <!-- ENTITIES -->
    <template>
        <name>entity-zpk-settings</name>
        <source>entity-zpk-settings.vtl</source>
        <variables>
            <var>
                <name>entities</name>
                <data>
                    SELECT 
                    e
                    FROM 
                    Dictionary e
                    JOIN e.type dtype
                    WHERE 
                    dtype.type = \'ZPKS_SETTINGS\'
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-zpk-dictionary</name>
        <source>entity-dictionary.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    Dictionary e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-bank-note</name>
        <source>entity-bank-note.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    BankNote e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-invoice</name>
        <source>entity-invoice.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    Invoice e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-counter</name>
        <source>entity-counter.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    Counter e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-counter-with-status</name>
        <source>entity-counter-with-status.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    Counter e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-charging</name>
        <source>entity-charging.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    Charging e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-payment-rent</name>
        <source>entity-payment-rent.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    PaymentRent e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-element</name>
        <source>entity-element.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    Element e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-community-default-contractor</name>
        <source>entity-community-default-contractor.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    a
                    FROM 
                    CommunityDefaultContractor a
                    WHERE 
                    a.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-default-booking-period</name>
        <source>entity-default-booking-period.vtl</source>
        <variables>
            <var>
                <name>period</name>
                <data>
                    {:single}
                    SELECT 
                    period
                    FROM 
                    BookingPeriod period
                    WHERE 
                    period.defaultPeriod = true
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-owner</name>
        <source>entity-owner.vtl</source>
        <variables>
            <var>
                <name>owner</name>
                <data>
                    {:single}
                    SELECT 
                    owner
                    FROM 
                    Owner owner
                    WHERE 
                    owner.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-contractor</name>
        <source>entity-contractor.vtl</source>
        <variables>
            <var>
                <name>contractor</name>
                <data>
                    {:single}
                    SELECT 
                    o
                    FROM 
                    Contractor o
                    WHERE 
                    o.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-zpk</name>
        <source>entity-zpk.vtl</source>
        <variables>
            <var>
                <name>zpk</name>
                <data>
                    {:single}
                    SELECT 
                    zpk
                    FROM 
                    ZakladowyPlanKont zpk
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    WHERE 
                    zpk.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-community</name>
        <source>entity-community.vtl</source>
        <variables>
            <var>
                <name>community</name>
                <data>
                    {:single}
                    SELECT c FROM Community c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>    
    <template>
        <name>entity-possession</name>
        <source>entity-possession.vtl</source>
        <variables>
            <var>
                <name>possession</name>
                <data>
                    {:single}
                    SELECT c FROM Possession c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-possession-comment</name>
        <source>entity-possession.vtl</source>
        <variables>
            <var>
                <name>possession</name>
                <data>
                    {:single}
                    SELECT p FROM Possession p Join p.counters c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-account</name>
        <source>entity-account.vtl</source>
        <variables>
            <var>
                <name>account</name>
                <data>
                    {:single}
                    SELECT c FROM Account c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-bank</name>
        <source>entity-bank.vtl</source>
        <variables>
            <var>
                <name>bank</name>
                <data>
                    {:single}
                    SELECT c FROM Bank c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-person</name>
        <source>entity-person.vtl</source>
        <variables>
            <var>
                <name>person</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    Person p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-company</name>
        <source>entity-company.vtl</source>
        <variables>
            <var>
                <name>company</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    Company p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-internal-payment</name>
        <source>entity-internal-payment.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    InternalPayment p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-override-elements</name>
        <source>entity-override-elements.vtl</source>
        <variables>
            <var>
                <name>elements</name>
                <data>
                    SELECT 
                    e
                    FROM 
                    ElementCommunity e
                    WHERE
                    e.element.id = {:id}
                    AND e.overrideParentValue = 1
                </data>
            </var>
        </variables>
    </template>
    <!-- LISTS -->
    <template>
        <name>list-community-charging</name>
        <source>list-community-charging.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    SELECT
                        community,
                        COUNT(possession.id) as counter
                    FROM
                        Community community
                        JOIN community.possessions possession
                    WHERE
                        possession.id NOT IN(
                            SELECT 
                                charged.id 
                            FROM 
                                Charging charging
                                JOIN charging.possession charged
                            WHERE
                                charging.month IN(
                                    SELECT
                                        dict.value
                                    FROM
                                        Dictionary dict
                                        JOIN dict.type dtype
                                    WHERE
                                        dtype.type = "PERIODS"
                                        AND dict.key = "CURRENT"))
                    GROUP BY
                        community.id
                    HAVING
                        counter > 0
                    ORDER BY
                        community.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-default-contractors</name>
        <source>list-default-contractors.vtl</source>
        <variables>
            <var>
                <name>companies</name>
                <data>
                    {:limit}
                    SELECT
                    company
                    FROM
                    Company company
                    WHERE company.defaultContractor = 1
                    ORDER BY
                    company.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-contractors</name>
        <source>list-contractors.vtl</source>
        <variables>
            <var>
                <name>contractors</name>
                <data>
                    {:limit}
                    SELECT
                    contractor
                    FROM
                    Contractor contractor
                    JOIN contractor.company company
                    JOIN contractor.community community
                    WHERE {:where} AND community.outDate is NULL
                    ORDER BY
                    community.name, contractor.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(contractor.id)
                    FROM
                    Contractor contractor
                    JOIN contractor.company company
                    JOIN contractor.community community
                    WHERE {:where} AND community.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-zpks</name>
        <source>list-zpks.vtl</source>
        <variables>
            <var>
                <name>zpks</name>
                <data>
                    {:limit}
                    SELECT
                    zpk
                    FROM
                    ZakladowyPlanKont zpk
                    JOIN zpk.community community
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    JOIN zpk.type pool
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN zpk.contractor contractor
                    WHERE {:where} AND
                    period.defaultPeriod = true
                    AND community.outDate is NULL
                    ORDER BY
                    community.name, pool.key, zpk.number ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(zpk.id)
                    FROM
                    ZakladowyPlanKont zpk
                    JOIN zpk.community community
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN zpk.contractor contractor
                    WHERE {:where} AND
                    period.defaultPeriod = true
                    AND community.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-communities</name>
        <source>list-communities.vtl</source>
        <variables>
            <var>
                <name>communities</name>
                <data>
                    {:limit}
                    SELECT
                    community
                    FROM
                    Community community
                    WHERE {:where} AND community.outDate is NULL
                    ORDER BY community.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(community.id)
                    FROM
                    Community community
                    WHERE {:where} AND community.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-possessions</name>
        <source>list-possessions.vtl</source>
        <variables>
            <var>
                <name>possessions</name>
                <data>
                    {:limit}
                    SELECT
                    possession
                    FROM 
                    Possession possession
                    JOIN possession.address possessionAddress
                    JOIN possession.community community
                    WHERE {:where} AND community.outDate is NULL
                    ORDER BY 
                    community.name, 
                    possessionAddress.street, 
                    possessionAddress.houseNumber, 
                    possessionAddress.flatNumber ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(possession.id)
                    FROM 
                    Possession possession
                    JOIN possession.address possessionAddress
                    JOIN possession.community community
                    WHERE {:where} AND community.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    
    <template>
        <name>list-accounts</name>
        <source>list-accounts.vtl</source>
        <variables>
            <var>
                <name>accounts</name>
                <data>
                    {:limit}
                    SELECT 
                    account
                    FROM 
                    Account account
                    LEFT OUTER JOIN account.community community
                    JOIN account.type accountType
                    JOIN account.bank bank
                    LEFT OUTER JOIN account.parrentAccount parentAccount
                    WHERE {:where} AND community.outDate is NULL AND account.closed = 0
                    ORDER BY account.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(account.id)
                    FROM 
                    Account account
                    LEFT OUTER JOIN account.community community
                    JOIN account.type accountType
                    JOIN account.bank bank
                    LEFT OUTER JOIN account.parrentAccount parentAccount
                    WHERE {:where} AND community.outDate is NULL and account.closed = 0
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-incoming-documents</name>
        <source>list-incoming-documents.vtl</source>
        <variables>
            <var>
                <name>documents</name>
                <data>
                    {:limit}
                    SELECT 
                    document
                    FROM 
                    IncomingPaymentDocumentPosition document
                    JOIN document.status status
                    JOIN document.document parentDocument
                    WHERE {:where}
                    ORDER BY document.requestDate DESC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(document.id)
                    FROM 
                    IncomingPaymentDocumentPosition document
                    JOIN document.status status
                    JOIN document.document parentDocument
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-default-elements</name>
        <source>list-default-elements.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    SELECT 
                    element
                    FROM 
                    Element element
                    WHERE element.defaultElement = 1
                    ORDER BY element.key ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-elements</name>
        <source>list-elements.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    SELECT 
                    element
                    FROM 
                    Element element
                    JOIN element.group elGroup
                    WHERE {:where}
                    ORDER BY element.key ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(element.id)
                    FROM 
                    Element element
                    JOIN element.group elGroup
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-counters</name>
        <source>list-counters.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    SELECT 
                    counter
                    FROM 
                    Counter counter
                    LEFT OUTER JOIN counter.community community
                    LEFT OUTER JOIN counter.possession possession
                    JOIN counter.type dtype
                    WHERE {:where} AND community.outDate is NULL
                    ORDER BY counter.serialNumber ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(counter.id)
                    FROM 
                    Counter counter
                    LEFT OUTER JOIN counter.community community
                    LEFT OUTER JOIN counter.possession possession
                    JOIN counter.type dtype
                    WHERE {:where} AND community.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-chargings</name>
        <source>list-chargings.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    {:native}
                    (SELECT 
                    charging.id,
                    charging.month,
                    bookingPeriod.name,
                    charging.timestamp,
                    community.name,
                    possessionAddress.street,
                    possessionAddress.flat_number,
                    possessionAddress.house_number,
                    SUM(chargingElement.element_value),
                    \'CHARGE\',
                    0
                    FROM 
                    charging AS charging
                    JOIN charging_element AS chargingElement ON (charging.id = chargingElement.charging_id)
                    JOIN possession AS possession ON (possession.id = charging.possession_id)
                    JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                    JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = charging.booking_period_id)
                    JOIN community AS community ON (community.id = possession.community_id)
                    WHERE {:where} AND community.out_date is NULL
                    GROUP BY charging.id)
                    UNION ALL (
                    SELECT
                    paymentRent.id,
                    paymentRent.month,
                    bookingPeriod.name,
                    paymentRent.timestamp,
                    community.name,
                    possessionAddress.street,
                    possessionAddress.flat_number,
                    possessionAddress.house_number,
                    paymentRentDetails.rent_value,
                    \'PAYMENT_RENT\',
                    paymentRent.repair_fund
                    FROM payment_rent AS paymentRent
                    JOIN payment_rent_details AS paymentRentDetails ON(paymentRent.id = paymentRentDetails.payment_rent_id)
                    JOIN possession AS possession ON(possession.id = paymentRent.possession_id)
                    JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                    JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = paymentRent.booking_period_id)
                    JOIN community AS community ON (community.id = possession.community_id)
                    WHERE {:where} AND community.out_date is NULL
                    ) UNION ALL (
                    SELECT
                        bankNote.id,
                        bankNote.month,
                        bookingPeriod.name,
                        bankNote.created_at AS timestamp,
                        community.name,
                        possessionAddress.street,
                        possessionAddress.flat_number,
                        possessionAddress.house_number,
                        bankNote.note_value,
                        \'BANK_NOTE\',
                        0
                    FROM bank_note AS bankNote
                    JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = bankNote.booking_period_id)
                    JOIN possession AS possession ON(possession.id = bankNote.possession_id)
                    JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                    JOIN community AS community ON (community.id = possession.community_id)
                    WHERE {:where} AND community.out_date is NULL
                    ) ORDER BY timestamp DESC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    {:native}
                    SELECT count(*)
                    FROM (
                        SELECT DISTINCT charging.id
                        FROM charging AS charging
                        JOIN charging_element AS chargingElement ON (charging.id = chargingElement.charging_id)
                        JOIN possession AS possession ON (possession.id = charging.possession_id)
                        JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                        JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = charging.booking_period_id)
                        JOIN community AS community ON (community.id = possession.community_id)
                        WHERE {:where} AND community.out_date is NULL
                        UNION ALL
                        SELECT paymentRent.id
                        FROM payment_rent AS paymentRent
                        JOIN payment_rent_details AS paymentRentDetails ON(paymentRent.id = paymentRentDetails.payment_rent_id)
                        JOIN possession AS possession ON(possession.id = paymentRent.possession_id)
                        JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                        JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = paymentRent.booking_period_id)
                        JOIN community AS community ON (community.id = possession.community_id)
                        WHERE {:where} AND community.out_date is NULL
                        UNION ALL
                        SELECT bankNote.id
                        FROM bank_note AS bankNote
                        JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = bankNote.booking_period_id)
                        JOIN possession AS possession ON(possession.id = bankNote.possession_id)
                        JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                        JOIN community AS community ON (community.id = possession.community_id)
                        WHERE {:where} AND community.out_date is NULL
                    ) AS tmp
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-charging-elements</name>
        <source>list-charging-elements.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    SELECT 
                    element
                    FROM 
                    ChargingElement element
                    JOIN element.charging charging
                    WHERE charging.id = {:where}
                    ORDER BY element.key ASC
                </data>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    COUNT(element.id)
                    FROM 
                    ChargingElement element
                    JOIN element.charging charging
                    WHERE charging.id = {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-bank-notes</name>
        <source>list-bank-notes.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    SELECT 
                    note
                    FROM 
                    BankNote note
                    JOIN note.element element
                    JOIN note.possession possession
                    JOIN possession.community community
                    WHERE {:where}
                    ORDER BY note.createdAt DESC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(note.id)
                    FROM 
                    BankNote note
                    JOIN note.element element
                    JOIN note.possession possession
                    JOIN possession.community community
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-owners</name>
        <source>list-owners.vtl</source>
        <variables>
            <var>
                <name>owners</name>
                <data>
                    {:limit}
                    SELECT
                    owner
                    FROM 
                    Owner owner
                    LEFT OUTER JOIN owner.company company
                    LEFT OUTER JOIN owner.person person
                    LEFT OUTER JOIN person.address pAddress
                    LEFT OUTER JOIN company.address cAddress
                    JOIN owner.possession possession
                    JOIN possession.community community
                    WHERE {:where} AND community.outDate is NULL
                    ORDER BY company.name, person.lastName ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(owner.id)
                    FROM 
                    Owner owner
                    LEFT OUTER JOIN owner.company company
                    LEFT OUTER JOIN owner.person person
                    LEFT OUTER JOIN person.address pAddress
                    LEFT OUTER JOIN company.address cAddress
                    JOIN owner.possession possession
                    JOIN possession.community community
                    WHERE {:where} AND community.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-banks</name>
        <source>list-banks.vtl</source>
        <variables>
            <var>
                <name>banks</name>
                <data>
                    {:limit}
                    SELECT
                    bank
                    FROM 
                    Bank bank
                    WHERE {:where}
                    ORDER BY bank.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(bank.id)
                    FROM 
                    Bank bank
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-internal-payments</name>
        <source>list-internal-payments.vtl</source>
        <variables>
            <var>
                <name>payments</name>
                <data>
                    {:limit}
                    SELECT
                    payment
                    FROM 
                    InternalPayment payment
                    JOIN payment.creditZpk cZpk
                    JOIN payment.debitZpk dZpk
                    JOIN payment.bookingPeriod bookingPeriod
                    JOIN cZpk.community community
                    WHERE {:where} AND community.outDate is NULL
                    ORDER BY payment.createdDate DESC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(payment.id)
                    FROM 
                    InternalPayment payment
                    JOIN payment.creditZpk cZpk
                    JOIN payment.debitZpk dZpk
                    JOIN payment.bookingPeriod bookingPeriod
                    JOIN cZpk.community community
                    WHERE {:where} AND community.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-invoices</name>
        <source>list-invoices.vtl</source>
        <variables>
            <var>
                <name>invoices</name>
                <data>
                    {:limit}
                    SELECT
                    invoice
                    FROM 
                    Invoice invoice
                    JOIN invoice.community community
                    WHERE {:where} AND community.outDate is NULL
                    ORDER BY invoice.createDate DESC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(invoice.id)
                    FROM 
                    Invoice invoice
                    JOIN invoice.community community
                    WHERE {:where} AND community.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-companies</name>
        <source>list-companies.vtl</source>
        <variables>
            <var>
                <name>companies</name>
                <data>
                    {:limit}
                    SELECT
                    company
                    FROM 
                    Company company
                    JOIN company.address address
                    WHERE {:where}
                    ORDER BY company.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(company.id)
                    FROM
                    Company company
                    JOIN company.address address
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-people</name>
        <source>list-people.vtl</source>
        <variables>
            <var>
                <name>people</name>
                <data>
                    {:limit}
                    SELECT
                    person
                    FROM 
                    Person person
                    JOIN person.address personAddress
                    WHERE {:where}
                    ORDER BY person.lastName, person.firstName ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(person.id)
                    FROM
                    Person person
                    JOIN person.address personAddress
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-zpks-dictionary</name>
        <source>list-dictionary.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    SELECT 
                        dict
                    FROM
                        DictionaryType dictType
                        JOIN dictType.dictionaryCollection dict
                    WHERE
                        dictType.type = "ZPKS"
                    ORDER BY
                        dict.key, dict.value ASC
                </data>
            </var>
             <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                        count(dict.id)
                    FROM
                        DictionaryType dictType
                        JOIN dictType.dictionaryCollection dict
                    WHERE
                        dictType.type = "ZPKS"
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-tax-dictionary</name>
        <source>list-dictionary.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    SELECT 
                        dict
                    FROM
                        DictionaryType dictType
                        JOIN dictType.dictionaryCollection dict
                    WHERE
                        dictType.type = "TAXES"
                    ORDER BY
                        dict.key, dict.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-zpks-summary</name>
        <source>list-zpks-summary.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    SELECT 
                        zpk
                    FROM
                        ZakladowyPlanKont zpk
                        JOIN zpk.community community
                        JOIN zpk.type ztype
                    WHERE
                        {:where} AND community.outDate is NULL
                    ORDER BY
                        ztype.key, zpk.number ASC
                </data>
            </var>
        </variables>
    </template>
    <!-- ################### SIMPLE LISTS ########################## -->
    
    <template>
        <name>list-booking-periods</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    period.id, 
                    period.name) 
                    FROM
                    BookingPeriod period
                    ORDER BY
                    period.name DESC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-booking-periods-active</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    period.id, 
                    period.name) 
                    FROM
                    BookingPeriod period
                    WHERE
                    period.active = true
                    ORDER BY
                    period.name DESC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-elements-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'ELEMENTS\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-documents-statuses</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'DOCUMENT_STATUS\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-payment-algorithms</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    pa.id, pa.name)
                    FROM 
                    PaymentAlgorithm pa
                    ORDER BY 
                    pa.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-accounts</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    a.id, a.number)
                    FROM 
                    Account a
                    Join a.community c
                    WHERE 
                    c.id = {:id}  AND c.outDate is NULL and a.closed = 0
                    ORDER BY 
                    a.number ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-accounts-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'ACCOUNT_TYPE\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-accounts-types-keys</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.key)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'ACCOUNT_TYPE\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-banks-names</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    bank.id, bank.name)
                    FROM 
                    Bank bank
                    ORDER BY 
                    bank.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-zpks-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dict.id, CONCAT(dict.key, " - ", dict.value))
                    FROM 
                    Dictionary dict
                    JOIN dict.type dtype
                    WHERE
                    dtype.type = \'ZPKS\'
                    ORDER BY 
                    dict.key, dict.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-counters-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dict.id, dict.value)
                    FROM 
                    Dictionary dict
                    JOIN dict.type dtype
                    WHERE
                    dtype.type = \'COUNTERS_TYPES\'
                    ORDER BY 
                    dict.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-years</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dict.id, dict.value)
                    FROM 
                    Dictionary dict
                    JOIN dict.type dtype
                    WHERE
                    dtype.type = \'YEARS\'
                    ORDER BY 
                    dict.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-communities-names</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    community.id, community.name)
                    FROM 
                    Community community 
                    WHERE
                    community.outDate is NULL
                    ORDER BY 
                    community.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-close-month-chargings</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        COUNT(possession.id) as counter
                    FROM
                        Community community
                        JOIN community.possessions possession
                    WHERE
                        possession.id NOT IN(
                            SELECT 
                                charged.id 
                            FROM 
                                Charging charging
                                JOIN charging.possession charged
                                JOIN charging.bookingPeriod bp
                            WHERE
                                bp.defaultPeriod = true
                                AND charging.month IN(
                                    SELECT
                                        dict.value
                                    FROM
                                        Dictionary dict
                                        JOIN dict.type dtype
                                    WHERE
                                        dtype.type = "PERIODS"
                                        AND dict.key = "CURRENT"))
                        AND community.outDate is NULL
                        AND CURRENT_DATE >= community.inDate
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-close-month-book</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        COUNT(payment.id) as counter
                    FROM
                        InternalPayment payment
                    WHERE
                        payment.booked = false
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-close-month-invoices</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        COUNT(i.id) as counter
                    FROM
                        Invoice i
                        JOIN i.community community
                    WHERE
                        i.accepted = false
                        AND community.outDate is null
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-close-month-accounts</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    Select 
                        count(c.id)
                    From 
                        Community c
                        Join c.defaultAccount ra 
                        Join ra.type rat
                        Join c.repairFundAccount rfa 
                    Where 
                        rfa Is Null 
                        and rat.key = \'RENT\'
                        AND c.outDate is NULL
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>current-charge-month</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        dict.value
                    FROM
                        Dictionary dict
                        JOIN dict.type dtype
                    WHERE
                        dtype.type = "PERIODS"
                        AND dict.key = "CURRENT"
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-contractors-with-invoices</name>
        <source>list-invoices.vtl</source>
        <variables>
            <var>
                <name>invoices</name>
                <data>
                    {:limit}
                    SELECT
                    invoice
                    FROM
                    Invoice invoice
                    JOIN invoice.contractor contractor
                    JOIN contractor.community community
                    WHERE {:where}
                    AND invoice.paymentsSum != invoice.toPay
                    AND community.outDate is NULL
                    ORDER BY
                    contractor.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>possession-rent-payments-calculations</name>
        <source>simple-double-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        Sum(prd.value)
                    FROM
                        PaymentRent pr
                        Join pr.paymentRentDetails prd
                        Join pr.possession p
                        Join pr.bookingPeriod bp
                    WHERE
                        p.id = {:id}
                        And bp.defaultPeriod = 1
                        And pr.repairFund = 0
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>possession-repair-fund-payments-calculations</name>
        <source>simple-double-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        Sum(prd.value)
                    FROM
                        PaymentRent pr
                        Join pr.paymentRentDetails prd
                        Join pr.possession p
                        Join pr.bookingPeriod bp
                    WHERE
                        p.id = {:id}
                        And bp.defaultPeriod = 1
                        And pr.repairFund = 1
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>possession-rent-chargings-calculations</name>
        <source>simple-double-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        Sum(ce.value)
                    FROM
                        Charging c
                        Join c.chargingElements ce
                        Join c.bookingPeriod bp
                        Join c.possession p
                    WHERE
                        p.id = {:id}
                        And bp.defaultPeriod = 1
                        And ce.group.id NOT IN (Select d.id from Dictionary d Join d.type dt Where dt.type = \'ELEMENTS\' And d.key = \'REPAIR_FUND\')
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>possession-repair-fund-chargings-calculations</name>
        <source>simple-double-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        Sum(ce.value)
                    FROM
                        Charging c
                        Join c.chargingElements ce
                        Join c.bookingPeriod bp
                        Join c.possession p
                    WHERE
                        p.id = {:id}
                        And bp.defaultPeriod = 1
                        And ce.group.id IN (Select d.id from Dictionary d Join d.type dt Where dt.type = \'ELEMENTS\' And d.key = \'REPAIR_FUND\')
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>booked-payments-in-invoice</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        Count(ip.id)
                    FROM
                        Invoice i
                        Join i.payments ip
                    WHERE
                        i.id = {:id}
                        And ip.booked = 1
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>last-counter-status</name>
        <source>entity-counter-status.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    SELECT
                        s
                    FROM
                        Counter c
                        Join c.statuses s
                    WHERE
                        c.id = {:id}
                    ORDER BY s.timestamp DESC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>charging-report</name>
        <source>custom-charging-report.vtl</source>
        <variables />
    </template>
</templates>
