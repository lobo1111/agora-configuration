<?xml version="1.0" encoding="UTF-8"?>
<templates>
    <!-- ENTITIES -->
    <template>
        <name>entity-zpk-settings</name>
        <source>entity-zpk-settings.vtl</source>
        <variables>
            <var>
                <name>entities</name>
                <data>
                    SELECT 
                    e
                    FROM 
                    Dictionary e
                    JOIN e.type dtype
                    WHERE 
                    dtype.type = \'ZPKS_SETTINGS\'
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-zpk-dictionary</name>
        <source>entity-dictionary.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    Dictionary e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-payment-rent</name>
        <source>entity-payment-rent.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    PaymentRent e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-element</name>
        <source>entity-element.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    e
                    FROM 
                    Element e
                    WHERE 
                    e.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-community-default-contractor</name>
        <source>entity-community-default-contractor.vtl</source>
        <variables>
            <var>
                <name>entity</name>
                <data>
                    {:single}
                    SELECT 
                    a
                    FROM 
                    CommunityDefaultContractor a
                    WHERE 
                    a.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-default-booking-period</name>
        <source>entity-default-booking-period.vtl</source>
        <variables>
            <var>
                <name>period</name>
                <data>
                    {:single}
                    SELECT 
                    period
                    FROM 
                    BookingPeriod period
                    WHERE 
                    period.defaultPeriod = true
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-owner</name>
        <source>entity-owner.vtl</source>
        <variables>
            <var>
                <name>owner</name>
                <data>
                    {:single}
                    SELECT 
                    owner
                    FROM 
                    Owner owner
                    WHERE 
                    owner.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-obligation</name>
        <source>entity-obligation.vtl</source>
        <variables>
            <var>
                <name>obligation</name>
                <data>
                    {:single}
                    SELECT 
                    o
                    FROM 
                    Obligation o
                    WHERE 
                    o.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-obligation-group</name>
        <source>entity-obligation-group.vtl</source>
        <variables>
            <var>
                <name>row</name>
                <data>
                    {:single}
                    SELECT 
                    o
                    FROM 
                    ObligationGroup o
                    WHERE 
                    o.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-zpk</name>
        <source>entity-zpk.vtl</source>
        <variables>
            <var>
                <name>zpk</name>
                <data>
                    {:single}
                    SELECT 
                    zpk
                    FROM 
                    ZakladowyPlanKont zpk
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    WHERE 
                    zpk.id = {:id}
                    AND period.id = {:bookingPeriod}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-community</name>
        <source>entity-community.vtl</source>
        <variables>
            <var>
                <name>community</name>
                <data>
                    {:single}
                    SELECT c FROM Community c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>    
    <template>
        <name>entity-possession</name>
        <source>entity-possession.vtl</source>
        <variables>
            <var>
                <name>possession</name>
                <data>
                    {:single}
                    SELECT c FROM Possession c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-account</name>
        <source>entity-account.vtl</source>
        <variables>
            <var>
                <name>account</name>
                <data>
                    {:single}
                    SELECT c FROM Account c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-bank</name>
        <source>entity-bank.vtl</source>
        <variables>
            <var>
                <name>bank</name>
                <data>
                    {:single}
                    SELECT c FROM Bank c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-person</name>
        <source>entity-person.vtl</source>
        <variables>
            <var>
                <name>person</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    Person p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-company</name>
        <source>entity-company.vtl</source>
        <variables>
            <var>
                <name>company</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    Company p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <!-- LISTS -->
    <template>
        <name>list-community-charging</name>
        <source>list-community-charging.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    SELECT
                        community,
                        COUNT(possession.id) as counter
                    FROM
                        Community community
                        JOIN community.possessions possession
                    WHERE
                        possession.id NOT IN(
                            SELECT 
                                charged.id 
                            FROM 
                                Charging charging
                                JOIN charging.possession charged
                            WHERE
                                charging.month IN(
                                    SELECT
                                        dict.value
                                    FROM
                                        Dictionary dict
                                        JOIN dict.type dtype
                                    WHERE
                                        dtype.type = "PERIODS"
                                        AND dict.key = "CURRENT"))
                    GROUP BY
                        community.id
                    HAVING
                        counter > 0
                    ORDER BY
                        community.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-obligations</name>
        <source>list-obligations.vtl</source>
        <variables>
            <var>
                <name>obligations</name>
                <data>
                    {:limit}
                    SELECT
                    obligation
                    FROM
                    Obligation obligation
                    JOIN obligation.contractor company
                    JOIN obligation.community community
                    LEFT OUTER JOIN obligation.obligationGroup obligationGroup
                    WHERE {:where}
                    ORDER BY
                    community.name, obligation.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(obligation.id)
                    FROM
                    Obligation obligation
                    JOIN obligation.contractor company
                    LEFT OUTER JOIN obligation.obligationGroup obligationGroup
                    JOIN obligation.community community
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-obligations-groups</name>
        <source>list-obligations-groups.vtl</source>
        <variables>
            <var>
                <name>groups</name>
                <data>
                    {:limit}
                    SELECT
                    og
                    FROM
                    ObligationGroup og
                    JOIN og.community community
                    WHERE {:where}
                    ORDER BY
                    community.name, og.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(og.id)
                    FROM
                    ObligationGroup og
                    JOIN og.community community
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-community-default-contractors</name>
        <source>list-community-default-contractors.vtl</source>
        <variables>
            <var>
                <name>contractors</name>
                <data>
                    {:limit}
                    SELECT
                    c
                    FROM
                    CommunityDefaultContractor c
                    JOIN c.company company
                    WHERE {:where}
                    ORDER BY
                    company.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(c.id)
                    FROM
                    CommunityDefaultContractor c
                    JOIN c.company company
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-zpks</name>
        <source>list-zpks.vtl</source>
        <variables>
            <var>
                <name>zpks</name>
                <data>
                    {:limit}
                    SELECT
                    zpk
                    FROM
                    ZakladowyPlanKont zpk
                    JOIN zpk.community community
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    JOIN zpk.type pool
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN zpk.obligation obligation
                    WHERE {:where} AND
                    period.defaultPeriod = true
                    ORDER BY
                    community.name, pool.key, zpk.number ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(zpk.id)
                    FROM
                    ZakladowyPlanKont zpk
                    JOIN zpk.community community
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN zpk.obligation obligation
                    WHERE {:where} AND
                    period.defaultPeriod = true
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-communities</name>
        <source>list-communities.vtl</source>
        <variables>
            <var>
                <name>communities</name>
                <data>
                    {:limit}
                    SELECT
                    community
                    FROM
                    Community community
                    WHERE {:where}
                    ORDER BY community.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(community.id)
                    FROM
                    Community community
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-possessions</name>
        <source>list-possessions.vtl</source>
        <variables>
            <var>
                <name>possessions</name>
                <data>
                    {:limit}
                    SELECT 
                    possession
                    FROM 
                    Possession possession
                    JOIN possession.address possessionAddress
                    JOIN possession.community community
                    WHERE {:where}
                    ORDER BY 
                    community.name, 
                    possessionAddress.street, 
                    possessionAddress.houseNumber, 
                    possessionAddress.flatNumber ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(possession.id)
                    FROM 
                    Possession possession
                    JOIN possession.address possessionAddress
                    JOIN possession.community community
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-banks</name>
        <source>list-banks.vtl</source>
        <variables>
            <var>
                <name>banks</name>
                <data>
                    {:limit}
                    SELECT 
                    bank
                    FROM 
                    Bank bank
                    WHERE {:where}
                    ORDER BY bank.name
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(bank.id)
                    FROM 
                    Bank bank
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-accounts</name>
        <source>list-accounts.vtl</source>
        <variables>
            <var>
                <name>accounts</name>
                <data>
                    {:limit}
                    SELECT 
                    account
                    FROM 
                    Account account
                    JOIN account.type accountType
                    JOIN account.bank bank
                    LEFT OUTER JOIN account.parrentAccount parentAccount
                    WHERE {:where}
                    ORDER BY account.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(account.id)
                    FROM 
                    Account account
                    JOIN account.type accountType
                    JOIN account.bank bank
                    JOIN account.parrentAccount parentAccount
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-incoming-documents</name>
        <source>list-incoming-documents.vtl</source>
        <variables>
            <var>
                <name>documents</name>
                <data>
                    {:limit}
                    SELECT 
                    document
                    FROM 
                    IncomingPaymentDocumentPosition document
                    JOIN document.status status
                    JOIN document.document parentDocument
                    WHERE {:where}
                    ORDER BY document.requestDate DESC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(document.id)
                    FROM 
                    IncomingPaymentDocumentPosition document
                    JOIN document.status status
                    JOIN document.document parentDocument
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-elements</name>
        <source>list-elements.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    SELECT 
                    element
                    FROM 
                    Element element
                    JOIN element.group elGroup
                    WHERE {:where}
                    ORDER BY element.key ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(element.id)
                    FROM 
                    Element element
                    JOIN element.group elGroup
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-chargings</name>
        <source>list-chargings.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    {:native}
                    (SELECT 
                    charging.id,
                    charging.month,
                    bookingPeriod.name,
                    charging.timestamp,
                    community.name,
                    possessionAddress.street,
                    possessionAddress.flat_number,
                    possessionAddress.house_number,
                    SUM(chargingElement.element_value),
                    \'CHARGE\' 
                    FROM 
                    charging AS charging
                    JOIN charging_element AS chargingElement ON (charging.id = chargingElement.charging_id)
                    JOIN possession AS possession ON (possession.id = charging.possession_id)
                    JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                    JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = charging.booking_period_id)
                    JOIN community AS community ON (community.id = possession.community_id)
                    WHERE {:where}
                    GROUP BY charging.id)
                    UNION (
                    SELECT
                    paymentRent.id,
                    paymentRent.month,
                    bookingPeriod.name,
                    paymentRent.timestamp,
                    community.name,
                    possessionAddress.street,
                    possessionAddress.flat_number,
                    possessionAddress.house_number,
                    paymentRentDetails.rent_value,
                    \'PAYMENT_RENT\' 
                    FROM payment_rent AS paymentRent
                    JOIN payment_rent_details AS paymentRentDetails ON(paymentRent.id = paymentRentDetails.payment_rent_id)
                    JOIN possession AS possession ON(possession.id = paymentRent.possession_id)
                    JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                    JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = paymentRent.booking_period_id)
                    JOIN community AS community ON (community.id = possession.community_id)
                    WHERE {:where}
                    )
                    ORDER BY timestamp DESC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    {:native}
                    SELECT count(*)
                    FROM (
                        SELECT DISTINCT charging.id
                        FROM charging AS charging
                        JOIN charging_element AS chargingElement ON (charging.id = chargingElement.charging_id)
                        JOIN possession AS possession ON (possession.id = charging.possession_id)
                        JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                        JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = charging.booking_period_id)
                        JOIN community AS community ON (community.id = possession.community_id)
                        WHERE {:where}
                        UNION
                        SELECT paymentRent.id
                        FROM payment_rent AS paymentRent
                        JOIN payment_rent_details AS paymentRentDetails ON(paymentRent.id = paymentRentDetails.payment_rent_id)
                        JOIN possession AS possession ON(possession.id = paymentRent.possession_id)
                        JOIN address AS possessionAddress ON(possessionAddress.id = possession.address_id)
                        JOIN booking_period AS bookingPeriod ON(bookingPeriod.id = paymentRent.booking_period_id)
                        JOIN community AS community ON (community.id = possession.community_id)
                        WHERE {:where}
                    ) AS tmp
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-charging-elements</name>
        <source>list-charging-elements.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    {:limit}
                    SELECT 
                    element
                    FROM 
                    ChargingElement element
                    JOIN element.charging charging
                    WHERE charging.id = {:where}
                    ORDER BY element.key ASC
                </data>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    COUNT(element.id)
                    FROM 
                    ChargingElement element
                    JOIN element.charging charging
                    WHERE charging.id = {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-owners</name>
        <source>list-owners.vtl</source>
        <variables>
            <var>
                <name>owners</name>
                <data>
                    {:limit}
                    SELECT
                    owner
                    FROM 
                    Owner owner
                    LEFT OUTER JOIN owner.company company
                    LEFT OUTER JOIN owner.person person
                    JOIN owner.possession possession
                    JOIN possession.community community
                    WHERE {:where}
                    ORDER BY company.name, person.lastName ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(owner.id)
                    FROM
                    Owner owner
                    LEFT OUTER JOIN owner.company company
                    LEFT OUTER JOIN owner.person person
                    JOIN owner.possession possession
                    JOIN possession.community community
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-companies</name>
        <source>list-companies.vtl</source>
        <variables>
            <var>
                <name>companies</name>
                <data>
                    {:limit}
                    SELECT
                    company
                    FROM 
                    Company company
                    JOIN company.address address
                    LEFT OUTER JOIN company.obligations obligation
                    LEFT OUTER JOIN company.owners owner
                    LEFT OUTER JOIN owner.possession possession
                    WHERE {:where}
                    ORDER BY company.name ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(company.id)
                    FROM
                    Company company
                    JOIN company.address address
                    LEFT OUTER JOIN company.obligations obligation
                    LEFT OUTER JOIN company.owners owner
                    LEFT OUTER JOIN owner.possession possession
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-people</name>
        <source>list-people.vtl</source>
        <variables>
            <var>
                <name>people</name>
                <data>
                    {:limit}
                    SELECT
                    person
                    FROM 
                    Person person
                    JOIN person.address personAddress
                    WHERE {:where}
                    ORDER BY person.lastName, person.firstName ASC
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT count(person.id)
                    FROM
                    Person person
                    JOIN person.address personAddress
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-zpks-dictionary</name>
        <source>list-dictionary.vtl</source>
        <variables>
            <var>
                <name>items</name>
                <data>
                    SELECT 
                        dict
                    FROM
                        DictionaryType dictType
                        JOIN dictType.dictionaryCollection dict
                    WHERE
                        dictType.type = "ZPKS"
                    ORDER BY
                        dict.key, dict.value ASC
                </data>
            </var>
        </variables>
    </template>
    <!-- ################### SIMPLE LISTS ########################## -->
    
    <template>
        <name>list-booking-periods</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    period.id, 
                    period.name) 
                    FROM
                    BookingPeriod period
                    ORDER BY
                    period.name DESC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-booking-periods-active</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    period.id, 
                    period.name) 
                    FROM
                    BookingPeriod period
                    WHERE
                    period.active = true
                    ORDER BY
                    period.name DESC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-elements-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'ELEMENTS\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-documents-statuses</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'DOCUMENT_STATUS\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-payment-algorithms</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    pa.id, pa.name)
                    FROM 
                    PaymentAlgorithm pa
                    ORDER BY 
                    pa.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-accounts-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'ACCOUNT_TYPE\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-banks-names</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    bank.id, bank.name)
                    FROM 
                    Bank bank
                    ORDER BY 
                    bank.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-zpks-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dict.id, CONCAT(dict.key, " - ", dict.value))
                    FROM 
                    Dictionary dict
                    JOIN dict.type dtype
                    WHERE
                    dtype.type = \'ZPKS\'
                    ORDER BY 
                    dict.key, dict.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-communities-names</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    community.id, community.name)
                    FROM 
                    Community community 
                    ORDER BY 
                    community.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-communities-obligations</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    obligation.id, obligation.name)
                    FROM 
                    Obligation obligation 
                    LEFT OUTER JOIN obligation.obligationGroup obligationGroup
                    JOIN obligation.community community
                    WHERE
                    community.id = {:id}
                    AND obligationGroup IS NULL OR obligationGroup.id = {:ogid}
                    ORDER BY 
                    obligation.name ASC
                </data>
            </var>
        </variables>
    </template>
      <template>
        <name>can-close-month</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        COUNT(possession.id) as counter
                    FROM
                        Community community
                        JOIN community.possessions possession
                    WHERE
                        possession.id NOT IN(
                            SELECT 
                                charged.id 
                            FROM 
                                Charging charging
                                JOIN charging.possession charged
                            WHERE
                                charging.month IN(
                                    SELECT
                                        dict.value
                                    FROM
                                        Dictionary dict
                                        JOIN dict.type dtype
                                    WHERE
                                        dtype.type = "PERIODS"
                                        AND dict.key = "CURRENT"))
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>current-charge-month</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                        dict.value
                    FROM
                        Dictionary dict
                        JOIN dict.type dtype
                    WHERE
                        dtype.type = "PERIODS"
                        AND dict.key = "CURRENT"
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-delete-obligation</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                    count(payment.id)
                    FROM
                    Payment payment
                    JOIN payment.obligation obligation
                    WHERE
                    obligation.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-delete-possession</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                    count(payment.id)
                    FROM
                    Payment payment
                    JOIN payment.possession possession
                    WHERE
                    possession.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-delete-zpk</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                    count(zpk.id)
                    FROM
                    ZakladowyPlanKont zpk
                    LEFT OUTER JOIN zpk.obligation obligation
                    LEFT OUTER JOIN zpk.zpkBalances balance
                    LEFT OUTER JOIN balance.payments payment
                    LEFT OUTER JOIN zpk.obligationGroups obligationGroup
                    WHERE
                    zpk.id = {:id}
                    AND (payment.id IS NOT NULL 
                    OR obligation.id IS NOT NULL
                    OR obligationGroup.id IS NOT NULL)
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-delete-element</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                    count(e.id)
                    FROM
                    Element e
                    LEFT OUTER JOIN e.communityElements ce
                    LEFT OUTER JOIN e.possessionElements pe
                    WHERE
                    e.id = {:id}
                    AND (ce.id IS NOT NULL 
                    OR pe.id IS NOT NULL)
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-delete-charge</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                    count(c.id)
                    FROM
                    Charging c
                    JOIN c.month m
                    WHERE
                    c.id = {:id}
                    AND m IN(
                                SELECT
                                    dict.value
                                FROM
                                    Dictionary dict
                                    JOIN dict.type dtype
                                WHERE
                                    dtype.type = "PERIODS"
                                    AND dict.key = "CURRENT")
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>can-delete-payment-rent</name>
        <source>simple-long-response.vtl</source>
        <variables>
            <var>
                <name>response</name>
                <data>
                    {:single}
                    SELECT
                    count(c.id)
                    FROM
                    PaymentRent c
                    JOIN c.month m
                    WHERE
                    c.id = {:id}
                    AND m IN(
                                SELECT
                                    dict.value
                                FROM
                                    Dictionary dict
                                    JOIN dict.type dtype
                                WHERE
                                    dtype.type = "PERIODS"
                                    AND dict.key = "CURRENT")
                </data>
            </var>
        </variables>
    </template>
</templates>
