<?xml version="1.0" encoding="UTF-8"?>
<templates>
    <!-- ENTITIES -->
    <template>
        <name>entity-community</name>
        <source>entity-community.vtl</source>
        <variables>
            <var>
                <name>community</name>
                <data>
                    {:single}
                    SELECT c FROM Community c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>    
    <template>
        <name>entity-possession</name>
        <source>entity-possession.vtl</source>
        <variables>
            <var>
                <name>possession</name>
                <data>
                    {:single}
                    SELECT c FROM Possession c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-account</name>
        <source>entity-account.vtl</source>
        <variables>
            <var>
                <name>account</name>
                <data>
                    {:single}
                    SELECT c FROM Account c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-person</name>
        <source>entity-person.vtl</source>
        <variables>
            <var>
                <name>person</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    Person p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-company</name>
        <source>entity-company.vtl</source>
        <variables>
            <var>
                <name>company</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    Company p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <!-- LISTS -->
    <template>
        <name>list-possessions</name>
        <source>list-possessions.vtl</source>
        <variables>
            <var>
                <name>communities</name>
                <data>
                    {:limit}
                    SELECT 
                    community.name, community.area, 
                    possessionAddress.street, possessionAddress.houseNumber, possessionAddress.flatNumber, 
                    possession.area, possession.id, community.id
                    FROM 
                    Community community 
                    JOIN community.possessions possession 
                    JOIN possession.address possessionAddress
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(community.id)
                    FROM 
                    Community community 
                    JOIN community.possessions possession 
                    JOIN possession.address possessionAddress
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-accounts</name>
        <source>list-accounts.vtl</source>
        <variables>
            <var>
                <name>accounts</name>
                <data>
                    {:limit}
                    SELECT 
                    account
                    FROM 
                    Account account
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(account.id)
                    FROM 
                    Account account
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-incoming-documents</name>
        <source>list-incoming-documents.vtl</source>
        <variables>
            <var>
                <name>documents</name>
                <data>
                    {:limit}
                    SELECT 
                    document,
                    dictionary
                    FROM 
                    IncomingPaymentDocumentPosition document,
                    Dictionary dictionary
                    WHERE document.document.status = dictionary.key AND {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(document.id)
                    FROM 
                    IncomingPaymentDocumentPosition document,
                    Dictionary dictionary
                    WHERE document.document.status = dictionary.key AND {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-payments</name>
        <source>list-payments.vtl</source>
        <variables>
            <var>
                <name>payments</name>
                <data>
                    {:limit}
                    SELECT 
                    payment
                    FROM 
                    Payment payment
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(payment.id)
                    FROM 
                    Payment payment
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-owners</name>
        <source>list-owners.vtl</source>
        <variables>
            <var>
                <name>owners</name>
                <data>
                    {:limit}
                    {:native}
                    SELECT * FROM (
                    (SELECT
                    person.id AS id,
                    CONCAT(person.first_name, \' \', person.last_name) AS name,
                    person.pesel AS number,
                    \'osoba fizyczna\' AS typeLabel,
                    \'PERSON\' AS typeKey,
                    person.last_name AS lastName,
                    address.street AS street,
                    address.house_number AS houseNumber,
                    address.flat_number AS flatNumber,
                    address.postal_code AS postalCode,
                    address.city AS city
                    FROM 
                    person 
                    JOIN address ON(person.address_id = address.id))
                    UNION ALL
                    (SELECT
                    company.id AS id,
                    company.name as name,
                    company.nip as number,
                    \'firma\' AS typelabel,
                    \'COMPANY\' AS typeKey,
                    \'\' AS lastName,
                    address.street AS street,
                    address.house_number AS houseNumber,
                    address.flat_number AS flatNumber,
                    address.postal_code AS postalCode,
                    address.city AS city
                    FROM 
                    company 
                    JOIN address ON(company.address_id = address.id))
                    ) AS tmp WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    {:native}
                    SELECT count(*) FROM (
                    (SELECT
                    person.id AS id,
                    CONCAT(person.first_name, \' \', person.last_name) AS name,
                    person.pesel AS number,
                    \'osoba fizyczna\' AS typeLabel,
                    \'PERSON\' AS typeKey,
                    address.street AS street,
                    address.house_number AS houseNumber,
                    address.flat_number AS flatNumber,
                    address.postal_code AS postalCode,
                    address.city AS city
                    FROM 
                    person 
                    JOIN address ON(person.address_id = address.id))
                    UNION ALL
                    (SELECT
                    company.id AS id,
                    company.name as name,
                    company.nip as number,
                    \'firma\' AS typelabel,
                    \'COMPANY\' AS typeKey,
                    address.street AS street,
                    address.house_number AS houseNumber,
                    address.flat_number AS flatNumber,
                    address.postal_code AS postalCode,
                    address.city AS city
                    FROM 
                    company 
                    JOIN address ON(company.address_id = address.id))
                    ) AS tmp WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-possession-owners</name>
        <source>list-possession-owners.vtl</source>
        <variables>
            <var>
                <name>owners</name>
                <data>
                    SELECT 
                    personOwner.id AS personId,
                    CONCAT(personOwner.firstName, " ", personOwner.lastName) AS personName,
                    companyOwner.id AS companyId,
                    companyOwner.name AS companyName
                    FROM 
                    Possession possession
                    LEFT OUTER JOIN possession.people personOwner
                    LEFT OUTER JOIN possession.companies companyOwner
                    WHERE
                    possession.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <!-- SIMPLE LISTS -->
    <template>
        <name>simple-list-person-owner-possessions</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    possession.id, 
                    CONCAT(possession.address.street, " ", possession.address.houseNumber, "/", possession.address.flatNumber)) 
                    FROM Person person
                    JOIN person.possessions possession
                    WHERE person.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-company-owner-possessions</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    possession.id, 
                    CONCAT(possession.address.street, " ", possession.address.houseNumber, "/", possession.address.flatNumber)) 
                    FROM Company company
                    JOIN company.possessions possession
                    WHERE company.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-payments-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'PAYMENT_TYPE\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-communities-names</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>communities</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    community.id, community.name)
                    FROM 
                    Community community 
                    ORDER BY 
                    community.name ASC
                </data>
            </var>
        </variables>
    </template>
</templates>
