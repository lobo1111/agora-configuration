<?xml version="1.0" encoding="UTF-8"?>
<templates>
    <!-- ENTITIES -->
    <template>
        <name>entity-default-booking-period</name>
        <source>entity-default-booking-period.vtl</source>
        <variables>
            <var>
                <name>period</name>
                <data>
                    {:single}
                    SELECT 
                    period
                    FROM 
                    BookingPeriod period
                    WHERE 
                    period.defaultPeriod = true
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-obligation</name>
        <source>entity-obligation.vtl</source>
        <variables>
            <var>
                <name>obligation</name>
                <data>
                    {:single}
                    SELECT 
                    o
                    FROM 
                    Obligation o
                    WHERE 
                    o.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-obligation-group</name>
        <source>entity-obligation-group.vtl</source>
        <variables>
            <var>
                <name>row</name>
                <data>
                    {:single}
                    SELECT 
                    o
                    FROM 
                    ObligationGroup o
                    WHERE 
                    o.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-payment-scheduler</name>
        <source>entity-payment-scheduler.vtl</source>
        <variables>
            <var>
                <name>ps</name>
                <data>
                    {:single}
                    SELECT 
                    ps
                    FROM 
                    PaymentScheduler ps
                    WHERE 
                    ps.id = {:id}
                </data>
            </var>
            <var>
                <name>free</name>
                <data>
                    SELECT 
                        free
                    FROM 
                        PaymentScheduler ps
                        JOIN ps.community c
                        JOIN c.zpks free
                    WHERE 
                        ps.id = {:id}
                        AND free.id NOT IN(
                            SELECT 
                                bounded.id
                            FROM 
                                ps.zpks bounded)
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-zpk</name>
        <source>entity-zpk.vtl</source>
        <variables>
            <var>
                <name>zpk</name>
                <data>
                    {:single}
                    SELECT 
                    zpk.id,
                    zpk.number,
                    balance.credit,
                    balance.debit,
                    community.id,
                    community.name,
                    person.id,
                    person.firstName, 
                    person.lastName,
                    company.id,
                    company.name,
                    possession.id,
                    possessionAddress.street, 
                    possessionAddress.houseNumber, 
                    possessionAddress.flatNumber,
                    zpk.description
                    FROM 
                    ZakladowyPlanKont zpk
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    JOIN zpk.community community
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN possession.address possessionAddress
                    LEFT OUTER JOIN zpk.person Person
                    LEFT OUTER JOIN zpk.company Company
                    WHERE 
                    zpk.id = {:id}
                    AND period.id = {:bookingPeriod}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-zpk-default</name>
        <source>entity-zpk.vtl</source>
        <variables>
            <var>
                <name>zpk</name>
                <data>
                    {:single}
                    SELECT 
                    zpk.id,
                    zpk.number,
                    balance.credit,
                    balance.debit,
                    community.id,
                    community.name,
                    person.id,
                    person.firstName, 
                    person.lastName,
                    company.id,
                    company.name,
                    possession.id,
                    possessionAddress.street, 
                    possessionAddress.houseNumber, 
                    possessionAddress.flatNumber,
                    zpk.description
                    FROM 
                    ZakladowyPlanKont zpk
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    JOIN zpk.community community
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN possession.address possessionAddress
                    LEFT OUTER JOIN zpk.person Person
                    LEFT OUTER JOIN zpk.company Company
                    WHERE 
                    zpk.id = {:id}
                    AND period.defaultPeriod = true
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-community</name>
        <source>entity-community.vtl</source>
        <variables>
            <var>
                <name>community</name>
                <data>
                    {:single}
                    SELECT c FROM Community c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>    
    <template>
        <name>entity-auto-payment</name>
        <source>entity-auto-payment.vtl</source>
        <variables>
            <var>
                <name>autoPayment</name>
                <data>
                    {:single}
                    SELECT c FROM AutoPayment c WHERE c.id = {:id}
                </data>
            </var>
            <var>
                <name>orders</name>
                <data>
                    SELECT c 
                    FROM 
                        AutoPaymentOrder c 
                        JOIN c.autoPayment ap
                    WHERE ap.id = {:id}
                    ORDER BY c.order
                </data>
            </var>
        </variables>
    </template>    
    <template>
        <name>entity-possession</name>
        <source>entity-possession.vtl</source>
        <variables>
            <var>
                <name>possession</name>
                <data>
                    {:single}
                    SELECT c FROM Possession c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-account</name>
        <source>entity-account.vtl</source>
        <variables>
            <var>
                <name>account</name>
                <data>
                    {:single}
                    SELECT c FROM Account c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-bank</name>
        <source>entity-bank.vtl</source>
        <variables>
            <var>
                <name>bank</name>
                <data>
                    {:single}
                    SELECT c FROM Bank c WHERE c.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-person</name>
        <source>entity-person.vtl</source>
        <variables>
            <var>
                <name>person</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    Person p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>entity-company</name>
        <source>entity-company.vtl</source>
        <variables>
            <var>
                <name>company</name>
                <data>
                    {:single}
                    SELECT 
                    p
                    FROM 
                    Company p
                    WHERE
                    p.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <!-- LISTS -->
    <template>
        <name>list-settlements</name>
        <source>list-settlements.vtl</source>
        <variables>
            <var>
                <name>settlements</name>
                <data>
                    {:native}
                    {:limit}
                    SELECT
                        og.id,
                        og.name,
                        c.name,
                        sum1.c,
                        sum1.d,
                        sum2.oc,
                        sum2.od
                    FROM
                        obligation_group AS og
                        JOIN community AS c ON(og.community_id = c.id)
                        JOIN 
                            (SELECT
                                og.id AS id,
                                og.name,
                                SUM(zb.credit) AS c,
                                SUM(zb.debit) AS d
                            FROM
                                    obligation_group AS og
                                    JOIN obligation_group_zpk AS ogz ON(og.id = ogz.obligation_group_id)
                                    JOIN zpk AS z ON(z.id = ogz.zpk_id)
                                    JOIN zpk_balance AS zb ON(z.id = zb.zpk_id)
                                    JOIN booking_period AS bp ON(zb.booking_period_id = bp.id)
                            WHERE
                                    bp.default_period = 1
                            GROUP BY 
                                    og.id, og.name) AS sum1 ON(og.id = sum1.id)
                        JOIN
                            (SELECT
                                    og.id AS id,
                                    og.name,
                                    SUM(zb.credit) AS oc,
                                    SUM(zb.debit) AS od
                            FROM
                                    obligation_group AS og
                                    JOIN obligation_group_obligation AS ogo ON(og.id = ogo.obligation_group_id)
                                    JOIN obligation AS o ON(ogo.obligation_id = o.id)
                                    JOIN zpk AS z ON(z.id = o.contractor_zpk_id)
                                    JOIN zpk_balance AS zb ON(z.id = zb.zpk_id)
                                    JOIN booking_period AS bp ON(zb.booking_period_id = bp.id)
                            WHERE
                                    bp.default_period = 1
                            GROUP BY 
                                    og.id, og.name) AS sum2 ON(og.id = sum2.id)
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:native}
                    {:single}
                    SELECT
                    count(og.id)
                    FROM
                        obligation_group AS og
                        JOIN community AS c ON(og.community_id = c.id)
                        JOIN 
                            (SELECT
                                og.id AS id,
                                og.name,
                                SUM(zb.credit) AS c,
                                SUM(zb.debit) AS d
                            FROM
                                    obligation_group AS og
                                    JOIN obligation_group_zpk AS ogz ON(og.id = ogz.obligation_group_id)
                                    JOIN zpk AS z ON(z.id = ogz.zpk_id)
                                    JOIN zpk_balance AS zb ON(z.id = zb.zpk_id)
                                    JOIN booking_period AS bp ON(zb.booking_period_id = bp.id)
                            WHERE
                                    bp.default_period = 1
                            GROUP BY 
                                    og.id, og.name) AS sum1 ON(og.id = sum1.id)
                        JOIN
                            (SELECT
                                    og.id AS id,
                                    og.name,
                                    SUM(zb.credit) AS oc,
                                    SUM(zb.debit) AS od
                            FROM
                                    obligation_group AS og
                                    JOIN obligation_group_obligation AS ogo ON(og.id = ogo.obligation_group_id)
                                    JOIN obligation AS o ON(ogo.obligation_id = o.id)
                                    JOIN zpk AS z ON(z.id = o.contractor_zpk_id)
                                    JOIN zpk_balance AS zb ON(z.id = zb.zpk_id)
                                    JOIN booking_period AS bp ON(zb.booking_period_id = bp.id)
                            WHERE
                                    bp.default_period = 1
                            GROUP BY 
                                    og.id, og.name) AS sum2 ON(og.id = sum2.id)
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-payments-scheduler</name>
        <source>list-payments-scheduler.vtl</source>
        <variables>
            <var>
                <name>schedulers</name>
                <data>
                    {:limit}
                    SELECT
                    paymentScheduler
                    FROM
                    PaymentScheduler paymentScheduler
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(paymentScheduler.id)
                    FROM
                    PaymentScheduler paymentScheduler
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-obligations</name>
        <source>list-obligations.vtl</source>
        <variables>
            <var>
                <name>obligations</name>
                <data>
                    {:limit}
                    SELECT
                    obligation
                    FROM
                    Obligation obligation
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(obligation.id)
                    FROM
                    Obligation obligation
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-obligations-groups</name>
        <source>list-obligations-groups.vtl</source>
        <variables>
            <var>
                <name>groups</name>
                <data>
                    {:limit}
                    SELECT
                    og
                    FROM
                    ObligationGroup og
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(og.id)
                    FROM
                    ObligationGroup og
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-auto-payments</name>
        <source>list-auto-payments.vtl</source>
        <variables>
            <var>
                <name>autoPayments</name>
                <data>
                    {:limit}
                    SELECT
                    autoPayment
                    FROM
                    AutoPayment autoPayment
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(autoPayment.id)
                    FROM
                    AutoPayment autoPayment
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-zpks</name>
        <source>list-zpks.vtl</source>
        <variables>
            <var>
                <name>zpks</name>
                <data>
                    {:limit}
                    SELECT
                    zpk
                    FROM
                    ZakladowyPlanKont zpk
                    JOIN zpk.community community
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN zpk.company company
                    LEFT OUTER JOIN zpk.person person
                    LEFT OUTER JOIN zpk.obligations obligation
                    WHERE {:where} AND
                    period.defaultPeriod = true
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(zpk.id)
                    FROM
                    ZakladowyPlanKont zpk
                    JOIN zpk.community community
                    JOIN zpk.zpkBalances balance
                    JOIN balance.bookingPeriod period
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN zpk.company company
                    LEFT OUTER JOIN zpk.person person
                    LEFT OUTER JOIN zpk.obligations obligation
                    WHERE {:where} AND
                    period.defaultPeriod = true
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-communities</name>
        <source>list-communities.vtl</source>
        <variables>
            <var>
                <name>communities</name>
                <data>
                    {:limit}
                    SELECT
                    community
                    FROM
                    Community community
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT
                    count(community.id)
                    FROM
                    Community community
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-possessions</name>
        <source>list-possessions.vtl</source>
        <variables>
            <var>
                <name>communities</name>
                <data>
                    {:limit}
                    SELECT 
                    community.name, community.area, 
                    possessionAddress.street, possessionAddress.houseNumber, possessionAddress.flatNumber, 
                    possession.area, possession.id, community.id
                    FROM 
                    Community community 
                    JOIN community.possessions possession 
                    JOIN possession.address possessionAddress
                    LEFT OUTER JOIN possession.companies companyOwner
                    LEFT OUTER JOIN companyOwner.address companyOwnerAddress
                    LEFT OUTER JOIN possession.people personOwner
                    LEFT OUTER JOIN personOwner.address personOwnerAddress
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(community.id)
                    FROM 
                    Community community 
                    JOIN community.possessions possession 
                    JOIN possession.address possessionAddress
                    LEFT OUTER JOIN possession.companies companyOwner
                    LEFT OUTER JOIN companyOwner.address companyOwnerAddress
                    LEFT OUTER JOIN possession.people personOwner
                    LEFT OUTER JOIN personOwner.address personOwnerAddress
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-banks</name>
        <source>list-banks.vtl</source>
        <variables>
            <var>
                <name>banks</name>
                <data>
                    {:limit}
                    SELECT 
                    bank
                    FROM 
                    Bank bank
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(bank.id)
                    FROM 
                    Bank bank
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-accounts</name>
        <source>list-accounts.vtl</source>
        <variables>
            <var>
                <name>accounts</name>
                <data>
                    {:limit}
                    SELECT 
                    account
                    FROM 
                    Account account
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(account.id)
                    FROM 
                    Account account
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-incoming-documents</name>
        <source>list-incoming-documents.vtl</source>
        <variables>
            <var>
                <name>documents</name>
                <data>
                    {:limit}
                    SELECT 
                    document
                    FROM 
                    IncomingPaymentDocumentPosition document
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(document.id)
                    FROM 
                    IncomingPaymentDocumentPosition document
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-payments</name>
        <source>list-payments.vtl</source>
        <variables>
            <var>
                <name>payments</name>
                <data>
                    {:limit}
                    SELECT 
                    payment
                    FROM 
                    Payment payment
                    JOIN payment.status paymentStatus
                    JOIN payment.type paymentType
                    LEFT OUTER JOIN payment.account account
                    LEFT OUTER JOIN account.bank bank
                    LEFT OUTER JOIN payment.zpkBalance balance
                    LEFT OUTER JOIN balance.bookingPeriod period
                    LEFT OUTER JOIN balance.zpk zpk
                    LEFT OUTER JOIN zpk.community community
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN zpk.person person
                    LEFT OUTER JOIN zpk.company company
                    LEFT OUTER JOIN payment.documents doc
                    WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    SELECT 
                    count(payment.id)
                    FROM 
                    Payment payment
                    JOIN payment.status paymentStatus
                    JOIN payment.type paymentType
                    LEFT OUTER JOIN payment.account account
                    LEFT OUTER JOIN account.bank bank
                    LEFT OUTER JOIN payment.zpkBalance balance
                    LEFT OUTER JOIN balance.bookingPeriod period
                    LEFT OUTER JOIN balance.zpk zpk
                    LEFT OUTER JOIN zpk.community community
                    LEFT OUTER JOIN zpk.possession possession
                    LEFT OUTER JOIN zpk.person person
                    LEFT OUTER JOIN zpk.company company
                    LEFT OUTER JOIN payment.documents doc
                    WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-owners</name>
        <source>list-owners.vtl</source>
        <variables>
            <var>
                <name>owners</name>
                <data>
                    {:limit}
                    {:native}
                    SELECT * FROM (
                    (SELECT
                    person.id AS id,
                    CONCAT(person.first_name, \' \', person.last_name) AS name,
                    person.pesel AS number,
                    \'osoba fizyczna\' AS typeLabel,
                    \'PERSON\' AS typeKey,
                    person.last_name AS lastName,
                    address.street AS street,
                    address.house_number AS houseNumber,
                    address.flat_number AS flatNumber,
                    address.postal_code AS postalCode,
                    address.city AS city
                    FROM 
                    person 
                    JOIN address ON(person.address_id = address.id))
                    UNION ALL
                    (SELECT
                    company.id AS id,
                    company.name as name,
                    company.nip as number,
                    \'firma\' AS typelabel,
                    \'COMPANY\' AS typeKey,
                    \'\' AS lastName,
                    address.street AS street,
                    address.house_number AS houseNumber,
                    address.flat_number AS flatNumber,
                    address.postal_code AS postalCode,
                    address.city AS city
                    FROM 
                    company 
                    JOIN address ON(company.address_id = address.id))
                    ) AS tmp WHERE {:where}
                </data>
            </var>
            <var>
                <name>countRows</name>
                <data>
                    {:single}
                    {:native}
                    SELECT count(*) FROM (
                    (SELECT
                    person.id AS id,
                    CONCAT(person.first_name, \' \', person.last_name) AS name,
                    person.pesel AS number,
                    \'osoba fizyczna\' AS typeLabel,
                    \'PERSON\' AS typeKey,
                    address.street AS street,
                    address.house_number AS houseNumber,
                    address.flat_number AS flatNumber,
                    address.postal_code AS postalCode,
                    address.city AS city
                    FROM 
                    person 
                    JOIN address ON(person.address_id = address.id))
                    UNION ALL
                    (SELECT
                    company.id AS id,
                    company.name as name,
                    company.nip as number,
                    \'firma\' AS typelabel,
                    \'COMPANY\' AS typeKey,
                    address.street AS street,
                    address.house_number AS houseNumber,
                    address.flat_number AS flatNumber,
                    address.postal_code AS postalCode,
                    address.city AS city
                    FROM 
                    company 
                    JOIN address ON(company.address_id = address.id))
                    ) AS tmp WHERE {:where}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-possession-owners</name>
        <source>list-possession-owners.vtl</source>
        <variables>
            <var>
                <name>owners</name>
                <data>
                    {:native}
                    SELECT 
                    person.id AS personId,
                    CONCAT(person.first_name, " ", person.last_name) AS personName,
                    -1 AS companyId,
                    ""  AS companyName
                    FROM 
                    possession
                    JOIN possession_person ON(possession.id = possession_person.possession_id)
                    JOIN person ON(possession_person.person_id = person.id)
                    WHERE
                    possession.id = {:id}
                    UNION ALL
                    SELECT 
                    -1 AS personId,
                    "" AS personName,
                    company.id AS companyId,
                    company.name AS companyName
                    FROM 
                    possession
                    JOIN possession_company ON(possession.id = possession_company.possession_id)
                    JOIN company ON(possession_company.company_id = company.id)
                    WHERE
                    possession.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    
    
    <!-- ################### SIMPLE LISTS ########################## -->
    
    <template>
        <name>list-booking-periods</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    period.id, 
                    period.name) 
                    FROM
                    BookingPeriod period
                    ORDER BY
                    period.name DESC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-booking-periods-active</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    period.id, 
                    period.name) 
                    FROM
                    BookingPeriod period
                    WHERE
                    period.active = true
                    ORDER BY
                    period.name DESC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-possession-zpks</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    zpk.id, 
                    zpk.number) 
                    FROM
                    Possession possession
                    JOIN possession.zpks zpk
                    WHERE
                    possession.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-community-zpks</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    zpk.id, 
                    CONCAT(zpk.number, " - ", zpk.description))
                    FROM
                    Community community
                    JOIN community.zpks zpk
                    WHERE
                    community.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-person-zpks</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    zpk.id, 
                    CONCAT(zpk.number, " ", zpk.description))
                    FROM
                    Person person
                    JOIN person.zpks zpk
                    WHERE
                    person.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>list-company-zpks</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    zpk.id, 
                    CONCAT(zpk.number, " ", zpk.description))
                    FROM
                    Company company
                    JOIN company.zpks zpk
                    WHERE
                    company.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-person-owner-possessions</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    possession.id, 
                    CONCAT(possession.address.street, " ", possession.address.houseNumber, "/", possession.address.flatNumber)) 
                    FROM Person person
                    JOIN person.possessions possession
                    WHERE person.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-company-owner-possessions</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    possession.id, 
                    CONCAT(possession.address.street, " ", possession.address.houseNumber, "/", possession.address.flatNumber)) 
                    FROM Company company
                    JOIN company.possessions possession
                    WHERE company.id = {:id}
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-payments-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'PAYMENT_TYPE\'
                    AND dic.key != \'AUTO\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-payments-statuses</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'PAYMENT_STATUS\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-accounts-types</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    dic.id, dic.value)
                    FROM 
                    Dictionary dic
                    WHERE 
                    dic.type.type = \'ACCOUNT_TYPE\'
                    ORDER BY 
                    dic.value ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-banks-names</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    bank.id, bank.name)
                    FROM 
                    Bank bank
                    ORDER BY 
                    bank.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-communities-names</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    community.id, community.name)
                    FROM 
                    Community community 
                    ORDER BY 
                    community.name ASC
                </data>
            </var>
        </variables>
    </template>
    <template>
        <name>simple-list-communities-obligations</name>
        <source>simple-list.vtl</source>
        <variables>
            <var>
                <name>list</name>
                <data>
                    SELECT new pl.reaper.container.data.helpers.SimpleList(
                    obligation.id, obligation.name)
                    FROM 
                    Obligation obligation 
                    JOIN obligation.community community
                    WHERE
                    community.id = {:id}
                    ORDER BY 
                    obligation.name ASC
                </data>
            </var>
        </variables>
    </template>
</templates>
