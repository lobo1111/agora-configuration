<?xml version="1.0" encoding="UTF-8"?> 
<databaseChangeLog 
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd"> 
    <changeSet author='tkopacki' id='scripts'>
        <sql>   
            CREATE TABLE IF NOT EXISTS `script` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `name` varchar(45) COLLATE utf8_polish_ci NOT NULL,
            `script` text COLLATE utf8_polish_ci,
            `on_init` text COLLATE utf8_polish_ci,
            `base` tinyint(1) DEFAULT '0',
            `parent` int(11) DEFAULT NULL,
            PRIMARY KEY (`id`),
            UNIQUE KEY `name_UNIQUE` (`name`),
            KEY `script_parent_fkey` (`parent`)
            ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_polish_ci AUTO_INCREMENT=6 ;

            CREATE TABLE IF NOT EXISTS `script_scheduler` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `name` varchar(45) COLLATE utf8_polish_ci NOT NULL,
            `id_script` int(11) NOT NULL,
            `enabled` tinyint(1) NOT NULL,
            `schedule` varchar(45) COLLATE utf8_polish_ci NOT NULL,
            PRIMARY KEY (`id`),
            UNIQUE KEY `name_UNIQUE` (`name`),
            KEY `scheduler_script_fkey` (`id_script`)
            ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_polish_ci AUTO_INCREMENT=3 ;
            
            
            ALTER TABLE `script`
            ADD CONSTRAINT `script_parent_fkey` FOREIGN KEY (`parent`) REFERENCES `script` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

            ALTER TABLE `script_scheduler`
            ADD CONSTRAINT `scheduler_script_fkey` FOREIGN KEY (`id_script`) REFERENCES `script` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;
        </sql>
    </changeSet>
    
    <changeSet author='tkopacki' id='outputScript'>
        <sql>
            INSERT INTO `script` (`name`, `script`, `on_init`, `base`, `parent`) VALUES
            ('Output', 
'class Output:
    _result = ''''
    def getResult(self):
        return self._result
    def setResult(self, result):
        self._result = result
    def appendResult(self, result):
        self._result += result', 'output = Output()', 1, NULL);
        </sql>
    </changeSet>
    
    <changeSet author='tkopacki' id='DBLoggerScript'>
        <sql>
            INSERT INTO `script` (`name`, `script`, `on_init`, `base`, `parent`) VALUES
            ('DBLogger', 
'from pl.reaper.container.data import Log
class Logger:
    def appendLog(self, level, message):
        log = Log()
        log.setScriptId(vars.get(''_scriptId''))
        log.setThreadId(vars.get(''_threadId''))
        log.setThreadName(vars.get(''_threadName''))
        log.setLevel(level)
        log.setMessage(message)
        log.setUuid(vars.get(''_uuid''))
        entityManager.persist(log)
        entityManager.flush()
    def info(self, message):
        self.appendLog(''INFO'', message)
    def warn(self, message):
        self.appendLog(''WARNING'', message)
    def error(self, message):
        self.appendLog(''ERROR'', message)', 'logger = Logger()', 1, NULL);
        </sql>
    </changeSet>
        
    <changeSet author='tkopacki' id='email-checker'>
        <sql>
            INSERT INTO `script` (`name`, `script`, `on_init`, `base`, `parent`) VALUES
            ('check-email', 
'import email
import getpass
import imaplib
import os
import uuid
class MailProcessor:
    def checkMailbox(self):
        if self.initConnection():
            for mail in self.getNewMails():
                self.processMail(mail)
                logger.info(''Mail processed'')
            self.closeConnection()
        logger.info(''All emails checked'')

    def closeConnection(self):
        self.__connection.close()
        self.__connection.logout()    
    
    def initConnection(self):        
        host = ''imap.gmail.com''        
        user = ''agora.wspolnoty@gmail.com''        
        password = ''tomasz.12''        
        self.__connection = imaplib.IMAP4_SSL(host)       
        response, message = self.__connection.login(user, password)        
        if response == ''OK'':            
            logger.info(''Connection to GMail established'')            
            return True        
        else:            
            logger.error(''Can\\''t connect to GMail: '' + response + '':'' + message)            
            return False    
    
    def getNewMails(self):        
        newMailDir = ''invoice/new''        
        response, message = self.__connection.select(newMailDir)        
        if response == ''OK'':            
            response, mails = self.__connection.search(None, ''*'')            
            if response == ''OK'':                
                if mails != None and len(mails) >= 1 and mails[0] != '''':                    
                    logger.info(''Got new messages: '' + mails[0])                    
                    return mails[0].split()            
            else:                
                logger.warning(''Can\\''t download mails: '' + response + '':'' + message)        
        else:            
            logger.warning(''Can\\''t download mails: '' + response + '':'' + message)        
        return []    
    
    def processMail(self, mailid):        
        response, data = self.__connection.fetch(mailid, ''(RFC822)'')        
        if response == ''OK'':           
            email_body = data[0][1]            
            message = email.message_from_string(email_body)            
            logger.info(''Processing email - From['' + message["From"] + ''] - Subject:'' + message[''Subject''])            
            self.downloadAttachments(message)            
            self.moveEmailToProcessed(mailid)        
        else:           
            logger.warning(''Can\\''t fetch mail: '' + response + '':'' + message)    
    
    def moveEmailToProcessed(self, mailid):        
        processedDir = ''invoice/processed''        
        response, message = self.__connection.copy(mailid, processedDir)        
        if response == ''OK'':            
            response, message = self.__connection.store(mailid, ''+FLAGS.SILENT'', ''(\\\\Deleted)'')            
            if response != ''OK'':                
                logger.warning(''Can\\''t delete mail: '' + response + '':'' + message)        
        else:            
            logger.warning(''Can\\''t archive mail: '' + response + '':'' + message)    
    
    def downloadAttachments(self, email):        
        for part in email.walk():            
            if self.isAttachment(part):                
                self.saveFile(part.get_filename(), part.get_payload(decode=True))    
    
    def isAttachment(self, part):        
        if part.get_content_maintype() == ''multipart'' or part.get(''Content-Disposition'') is None:            
            return False        
        else:            
            return True    
    
    def saveFile(self, filename, data):        
        uniqueFilename = ''['' + str(uuid.uuid4()) + '']'' + filename        
        dir = ''/home/agora/attachments''        
        destination = os.path.join(dir, uniqueFilename)        
        if not os.path.isfile(destination):            
            file = open(destination, ''wb'')            
            file.write(data)            
            file.close()            
            logger.info(''Attachment saved: '' + filename)        
        else:            
            logger.warning(''File already exists'')', 'MailProcessor().checkMailbox()', 0, NULL);
            
        INSERT INTO script_scheduler(name, id_script, enabled, schedule)
            SELECT 'email-checker', id, 1, '* * * * *' FROM `script` WHERE `name` = 'check-email'
        </sql>
    </changeSet>

</databaseChangeLog>